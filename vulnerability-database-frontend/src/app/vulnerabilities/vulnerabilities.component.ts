
/**
   * This component is for the custom query page, where a user can craft their own SQL query
   * Author: Trey Cosnowski, Alex Bocchi
*/


import { Component, Input, OnInit, ViewChild, EventEmitter, Output, inject, NgModule } from '@angular/core';
import { Router } from '@angular/router';
import { MatDrawer, MatSidenavModule } from '@angular/material/sidenav';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { trigger, state, style, animate, transition } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { ApiService } from '../api.service';
import { HttpClientModule } from '@angular/common/http';
import { AbstractControl, FormArray, FormBuilder, FormControl, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { ComponentFilter } from './componentFilter/filter.pipe';



@Component({
  selector: 'app-vulnerabilities',
  standalone: true,
  imports: [MatSidenavModule, MatIconModule, MatButtonModule, CommonModule, FormsModule,ReactiveFormsModule, ComponentFilter],
  templateUrl: './vulnerabilities.component.html',
  styleUrl: './vulnerabilities.component.css',
  animations: [
    trigger(
      'openclose', [
        state('open', style({
          transform: 'translateY(0%)',
          
        })),
        state('close', style({
          transform: 'translateY(100%)',

        })),
        transition('open <=> close',[
          animate('0.5s ease-in-out')
        ])
      ]
    ),
    
    
  ]
})

export class VulnerabilitiesComponent implements OnInit {

  constructor(private formBuilder: FormBuilder, private router: Router, private apiService: ApiService) {}
  ngOnInit(): void {
    this.apiService.getComponents().subscribe({
      next: (components) => {
        
        for (let i = 0; i < components["results"].length; i++){
          this.components.push(components["results"][i]["component"])
        }
      }
    })
  }


  date = new Date()
  year = this.date.getFullYear();
  month = (this.date.getMonth() + 1).toString().padStart(2,'0');

  endDate = `${this.year}-${this.month}`;
  startDate = "2015-08"

  queryForm = this.formBuilder.group({
    baseScoreMin: new FormControl(''),
    baseScoreMax: new FormControl(''),
    exploitabilityScoreMin: new FormControl(''),
    exploitabilityScoreMax: new FormControl(''),
    impactScoreMin: new FormControl(''),
    impactScoreMax: new FormControl(''),
    start_date: new FormControl(this.startDate, Validators.required),
    end_date: new FormControl(this.endDate, Validators.required),
    patchLevel01: new FormControl(''),
    patchLevel02: new FormControl(''),
    patchLevel05: new FormControl(''),
    patchLevel06: new FormControl(''),
    severity: new FormControl(''),
    order: new FormControl(''),
    orderDirection: new FormControl('ascending'),
    component: new FormControl(''),
    androidOS: new FormControl(''),
    pixel: new FormControl(''),
  })


  invalidFormMessage: string = "";

  vulnerabilities: any[];

  isOpen = false;
  validBaseScore: boolean = true
  validImpactScore: boolean = true
  validExploitScore: boolean = true
  validForm: boolean = true
  validDate: boolean = true

  baseScoreFilled: boolean = false;
  exploitabilityScoreFilled: boolean = false
  impactScoreFilled: boolean = false
  dateRangeFilled: boolean = false

  searchText: string = ''
  components: string[] = []


  
  
  @Output() queryChanged = new EventEmitter<any>();
  selectedValues: any = {
    baseScore: null,
    cve: null,
    date: null,
    exploitabilityScore: null,
    impactScore: null,
    patchLevel: null,
    publiclyAvailable: null,
    severity: null
  };





    // Emit the queryChanged event when the user changes the selection
    onQueryChange() {
      const filteredValues = Object.entries(this.queryForm.value)
      .filter(([key, value]) => value !== null && value !== '')
      .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
      
      console.log(filteredValues)

    // Navigate to the new page with the selected values (replace 'new-page' with your desired route)
      this.router.navigate(['/vulnerability-index'], { queryParams: filteredValues } );
    }

    setPubliclyAvailable(value: string) {
      this.selectedValues.publiclyAvailable = value;
    }

  // Changes the value of the form if its checkbox is selected
  onCheckBoxChange(event: any, patchLevel: string){
    if (event.target.checked){
      if (patchLevel == "patchLevel01"){
        this.queryForm.patchValue({
          patchLevel01: "01"
        })
      }

      else if (patchLevel == "patchLevel02"){
        this.queryForm.patchValue({
          patchLevel02: "02"
        })
      }

      else if (patchLevel == "patchLevel05"){
        this.queryForm.patchValue({
          patchLevel05: "05"
        })
      }

      else if (patchLevel == "patchLevel06"){
        this.queryForm.patchValue({
          patchLevel06: "06"
        })
      }

    }
    else{
      if (patchLevel == "patchLevel01"){
        this.queryForm.patchValue({
          patchLevel01: undefined
        })
      }

      else if (patchLevel == "patchLevel02"){
        this.queryForm.patchValue({
          patchLevel02: undefined
        })
      }

      else if (patchLevel == "patchLevel05"){
        this.queryForm.patchValue({
          patchLevel05: undefined
        })
      }

      else if (patchLevel == "patchLevel06"){
        this.queryForm.patchValue({
          patchLevel06: undefined
        })
      }
    }
  }

  // Used to select all of the dates
  selectAllDates(event: any){
    if (event.target.checked){
      this.queryForm.patchValue({
        start_date: this.startDate,
        end_date: this.endDate
      })

    }
    else{
      this.queryForm.patchValue({
        start_date: '',
        end_date: ''
      })
    }
  }

  checkValidation(id: string, secondId : string){
    if (this.queryForm.get(id)?.value == undefined && this.queryForm.get(secondId)?.value == undefined){
      if (id.includes("base")){
        console.log(this.validBaseScore)
        this.validBaseScore = true
      }

      else if (id.includes("impact")){
        this.validImpactScore = true
      }

      else if (id.includes("exploitability")){
        this.validExploitScore = true
      }
    }

    else if (this.queryForm.get(id)?.value == undefined || this.queryForm.get(secondId)?.value == undefined){
      if (id.includes("base")){
        console.log(this.validBaseScore)
        this.validBaseScore = false
      }

      else if (id.includes("impact")){
        this.validImpactScore = false
      }

      else if (id.includes("exploitability")){
        this.validExploitScore = false
      }
    }

    else if (this.queryForm.get(id)?.value != undefined && this.queryForm.get(secondId)?.value != undefined){
      if (id.includes("base")){
        if (this.queryForm.get(id)?.value > this.queryForm.get(secondId)?.value){
          console.log(this.validBaseScore)
          this.validBaseScore = false
        }
        else{
          this.validBaseScore = true
        }
      }

      else if (id.includes("impact")){
        if (this.queryForm.get(id)?.value > this.queryForm.get(secondId)?.value){
          this.validImpactScore = false
        }
        else{
          this.validImpactScore = true
        }
      }

      else if (id.includes("exploitability")){
        if (this.queryForm.get(id)?.value > this.queryForm.get(secondId)?.value){
          this.validExploitScore = false
        }
        else{
          this.validExploitScore = true
        }
      }
    }

    if (!this.validBaseScore || !this.validExploitScore || !this.validImpactScore){
      this.validForm = false
    }
    else{
      this.validForm = true
    }
  }

  checkDateValidation(){
    var startDate = this.queryForm.get("start_date")?.value;
    var endDate = this.queryForm.get("end_date")?.value;
    if (startDate != undefined && endDate != undefined){
      if (startDate > endDate){
        this.validDate = false
      }
      else{
        this.validDate = true
      }
    }
  }

  selectComponent(comp: any){
    this.queryForm.patchValue({
      component: comp
    })
  }

  checkBulletin(event: any, bulletin: string){
    if (event.target.checked){
      if (bulletin == "Android OS"){
        this.queryForm.patchValue({
          androidOS: bulletin
        })
      }
      else if (bulletin == "Pixel"){
        this.queryForm.patchValue({
          pixel: bulletin
        })
      }
    }
    else{
      if (bulletin == "Android OS"){
        this.queryForm.patchValue({
          androidOS: undefined
        })
      }
      else if (bulletin == "Pixel"){
        this.queryForm.patchValue({
          pixel: undefined
        })
      }
    }
  }
}
    





