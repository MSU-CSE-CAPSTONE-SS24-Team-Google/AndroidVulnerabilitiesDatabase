/**
   * This component that shows all of the important details about a vulnerability 
   * Author: Trey Cosnowski, Alex Bocchi
*/

import { Component, ViewChild, OnInit, HostListener, QueryList,ViewChildren } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { ApiService } from '../api.service';
import { ActivatedRoute } from '@angular/router';
import { Chart,  ChartOptions, } from 'chart.js';
import { MatIconModule } from '@angular/material/icon';
import { BaseChartDirective, NgChartsModule } from 'ng2-charts';
import { Observable } from 'rxjs';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';



@Component({
  selector: 'app-vulnerability-index',
  standalone: true,
  imports: [CommonModule, NgChartsModule, MatCardModule, MatIconModule, MatProgressSpinnerModule],
  templateUrl: './vulnerability-index.component.html',
  styleUrl: './vulnerability-index.component.css'

})
export class VulnerabilityIndexComponent implements OnInit{
  @ViewChildren(BaseChartDirective) charts: QueryList<BaseChartDirective>;
  queryParams: any;
  vulnerabilities: any;
  dateRangeVulnerabilitues: any;
  baseScoreVulnerabilities: any;
  start: any;
  end: any;
  
  currentPage = 0;
  totalPages = 0;
  vulnerabilitiesLength: any;

  sevData: Array<number> = [];
  baseScoreData: Array<number> = [];
  exploitScoreData: Array<number> = [];
  impactScoreData: Array<number> = [];



  

  constructor(private router: Router, private apiService: ApiService, private route: ActivatedRoute) {}

  ngOnInit() {
    console.log("test")
    this.route.queryParams.subscribe(params => {
      
      this.apiService.customQuery(JSON.stringify(params)).subscribe({
        next: (data) => {
          this.vulnerabilities = data["results"]
          console.log(this.vulnerabilities)
          this.handelData()
          this.charts.forEach((child) => {
            if (child && child.chart) {
              child.chart.update();
            }
          })
        }
      })
    });
  }



  handelData(){
    this.vulnerabilitiesLength = Object.keys(this.vulnerabilities).length
    this.totalPages = Math.floor(this.vulnerabilitiesLength/20);

    this.sevData = this.visualizeSeverity();
    this.baseScoreData = this.visualizeBaseScore();
    this.exploitScoreData = this.visualizeExploitData();
    this.impactScoreData = this.visualizeImpactScore();


    this.SeverityData.datasets[0].data = this.sevData;
    this.CVSSData.bsdata[0].data = this.baseScoreData;
    this.CVSSData.esdata[0].data = this.exploitScoreData;
    this.CVSSData.isdata[0].data = this.impactScoreData;

    console.log(this.CVSSData.isdata.length)
  }

  //Simple function to help visualize severity data
  visualizeSeverity() :  Array<number>{
    let sevdata: Array<number> = [0, 0, 0, 0];
    for (let i = 0; i < this.vulnerabilities.length; i++)
    {
      if (this.vulnerabilities[i]['severity'] == 'Critical')
      {
        sevdata[0] += 1;
      }
      else if(this.vulnerabilities[i]['severity'] == 'High')
      {
        sevdata[1] +=1;
      }
      else if(this.vulnerabilities[i]['severity'] == 'Moderate')
      {
        sevdata[2] +=1;
      }
      else if(this.vulnerabilities[i]['severity'] == 'Low')
      {
        sevdata[3] +=1;
      }
    }
    return sevdata;
  }

  //simple function to help visualize base score data
  visualizeBaseScore(): Array<number>
  {
    let bsData: Array<number>= [0,0,0,0];
    for (let i = 0; i < this.vulnerabilities.length; i++)
    {

      if (0 < this.vulnerabilities[i]['base_score']  && this.vulnerabilities[i]['base_score']  <= 2.5)
      {
        bsData[3] += 1;
      }
      else if(2.5 < this.vulnerabilities[i]['base_score'] && this.vulnerabilities[i]['base_score']  <= 5)
      {
        bsData[2] +=1;
      }
      else if(5 < this.vulnerabilities[i]['base_score']  && this.vulnerabilities[i]['base_score']  <= 7.5)
      {
        bsData[1] +=1;
      }
      else if(7.5 < this.vulnerabilities[i]['base_score'] && this.vulnerabilities[i]['base_score']  <= 10)
      {
        bsData[0] +=1;
      }
    }
    return bsData;
  }

  visualizeExploitData(){
    let esData: Array<number>= [0,0,0,0];
    for (let i = 0; i < this.vulnerabilities.length; i++)
    {

      if (0 < this.vulnerabilities[i]['exploitability_score']  && this.vulnerabilities[i]['exploitability_score']  <= 2.5)
      {
        esData[3] += 1;
      }
      else if(2.5 < this.vulnerabilities[i]['exploitability_score'] && this.vulnerabilities[i]['exploitability_score']  <= 5)
      {
        esData[2] +=1;
      }
      else if(5 < this.vulnerabilities[i]['exploitability_score']  && this.vulnerabilities[i]['exploitability_score']  <= 7.5)
      {
        esData[1] +=1;
      }
      else if(7.5 < this.vulnerabilities[i]['exploitability_score'] && this.vulnerabilities[i]['exploitability_score']  <= 10)
      {
        esData[0] +=1;
      }
    }
    return esData;
  }

  visualizeImpactScore(){
    let esData: Array<number>= [0,0,0,0];
    for (let i = 0; i < this.vulnerabilities.length; i++)
    {

      if (0 < this.vulnerabilities[i]['impact_score']  && this.vulnerabilities[i]['exploitabiliimpact_scorety_score']  <= 2.5)
      {
        esData[3] += 1;
      }
      else if(2.5 < this.vulnerabilities[i]['impact_score'] && this.vulnerabilities[i]['exploitabilityimpact_score_score']  <= 5)
      {
        esData[2] +=1;
      }
      else if(5 < this.vulnerabilities[i]['impact_score']  && this.vulnerabilities[i]['impact_score']  <= 7.5)
      {
        esData[1] +=1;
      }
      else if(7.5 < this.vulnerabilities[i]['impact_score'] && this.vulnerabilities[i]['impact_score']  <= 10)
      {
        esData[0] +=1;
      }
    }
    return esData;
  }

  goToDetailsPage(vulnerability: any) {
    this.router.navigate(['/details/', vulnerability.cve]);
  }

  //Display the first 10 api results in the table
  currentTablePage() {
    if (this.vulnerabilities) {
        const start = this.currentPage * 10;
        return this.vulnerabilities.slice(start, start + 20);
    }
    return []; // Return an empty array or handle the null case
  }

  //go to the next page in the table
  nextPage(){
    this.currentPage++;
  }
  //previous page in the table
  prevPage(){
    this.currentPage--;
  }

  //Need to make sure that you are actually able to increment the page
  hasNextPage(): boolean {
    return (this.currentPage + 1) * 20 < this.vulnerabilitiesLength;
  }

  //need to make sure you are actually able to decrement the page
  hasPrevPage(): boolean {
    return this.currentPage > 0;
  }

  //Event listener for the left and right arrows, it will increment or decrement the table page if possible
  @HostListener('document:keydown', ['$event'])
  handleLeftRightArrows(event: KeyboardEvent) {
      if (event.key === 'ArrowLeft')
      {
        if (this.hasPrevPage())
        {
          this.prevPage();
        }
      }
      else if (event.key === 'ArrowRight')
      {
        if (this.hasNextPage())
        {
          this.nextPage();
        }
      }
  }

  //initalizes the data that will be used in the charts on the html page
  SeverityData = {
    
    labels: ['Critical', 'High', 'Moderate', 'Low'],
    datasets: [
      {
        data: this.sevData,
      }
    ]
  };
  //define some styles/options for the charts
  SeverityOptions = {
    //these two options allow me to resize the graphs a bit
    responsive: true,
    maintainAspectRatio: false,

    plugins: {
      title: {
        display: true,
        text: 'Severity Distribution'
      },
     
    }
  };
  CVSSData = {
    
    labels: ['7.6-10', '5.1-7.5', '2.6-5','0-2.5' ],
    bsdata: [
      {
        data: this.baseScoreData,
      }
    ],
    esdata: [
      {
        data: this.exploitScoreData,
      }
    ],
    isdata: [
      {
        data: this.exploitScoreData,
      }
    ]
  };
  
  BSOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      title: {
        display: true,
        text: 'Base Score Distribution'
      },
     
    }
  };

  ISOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      title: {
        display: true,
        text: 'Impact Score Distribution'
      },
     
    }
  };

  ESOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      title: {
        display: true,
        text: 'Exploitability Score Distribution'
      },
     
    }
  };

  getSeverityColor(baseScore: number): string {
    if (baseScore >= 7) {
      return 'warn'; // Use Angular Material warn color for high severity
    } else if (baseScore >= 4) {
      return 'accent'; // Use Angular Material accent color for medium severity
    } else {
      return 'primary'; // Use Angular Material primary color for low severity
    }
  }


  ngAfterViewInit(): void {
    this.charts.forEach((child) => {
      if (child && child.chart) {
        child.chart.update();
      }
    })

  }
}
