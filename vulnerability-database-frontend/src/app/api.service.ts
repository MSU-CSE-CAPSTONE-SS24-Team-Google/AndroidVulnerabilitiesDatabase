import { Injectable, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

interface MonitoringData {
  metric: string;
  timestamp: string;  
  value: number;
}


@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private baseURL = "https://web-app-tg6ur4q5ua-uc.a.run.app/";
  private localURL = "http://localhost:8080/";
  private  projectId: string = 'solid-gamma-411111';
  // const filter = 'metric.type="compute.googleapis.com/instance/cpu/utilization"';

  
  constructor(private http: HttpClient) { }
  testAPI(): Observable<any> {
    return this.http.get(`${this.baseURL}/api/data`);
  }

  localmergedDataAPI(cve: string): Observable<any> {
    return this.http.get<any>(`${this.localURL}/api/vulnerabilities/merged_data/${cve}`);
  }
  mergedDataAPIByDate(start_date : string, end_date: string): Observable<any> {
    return this.http.get<any>(`${this.baseURL}/api/vulnerabilities/merged_data/${start_date}&${end_date}`);

  }
  getNvdData(cveId: string): Observable<any> {
    return this.http.get<any>(`${this.baseURL}/api/nvd_data/${cveId}`);
  }

  getAsbData(cve: string): Observable<any> {
    return this.http.get<any>(`${this.baseURL}/api/vulnerabilities/merged_data/${cve}`);
  }


  getDataBasedOnFilters(startDate: string, endDate: string, field: string): Observable<any> {
    return this.http.get<any>(`${this.baseURL}/api/vulnerabilities/${startDate}/${endDate}/${field}`)
  }

  getDataRange(start_date: string, end_date: string): Observable<any> {
    return this.http.get<any>(`${this.baseURL}/api/vulnerabilities/${start_date}/${end_date}/field`);
  }

  getBaseScoreRange(baseScoreMin: string, baseScoreMax: string): Observable<any> {
    return this.http.get<any>(`${this.baseURL}/api/vulnerabilities/${baseScoreMin}/${baseScoreMax}`);
  }
  
  customQuery(param: string): Observable<any> {
    return this.http.get<any>(`${this.baseURL}/api/vulnerabilities/custom/${param}`)
  }

  getMultipleCVEsData( cves : string[]) : Observable<any> {
        const queryParams = cves.map(cve => `cve=${cve}`).join('&');
    return this.http.get<any>(`${this.baseURL}/api/vulnerabilities/multiple_cves?${queryParams}`);
  }

  getComponents(): Observable<any>{
    return this.http.get<any>(`${this.baseURL}/api/vulnerabilities/components`);
  }

  getTrends(): Observable<any>{
    return this.http.get<any>(`${this.baseURL}/api/analytic_data/trendingCVEs`);
  }

  getBadCVE(cve: string): Observable<any>{
    return this.http.get<any>(`${this.baseURL}/api/vulnerabilities/noBaseScore/${cve}`);
  }

  getUpdateLog(): Observable<any> {
    return this.http.get<any>(`${this.baseURL}/api/analytic_data/asb_update_log`);
  }
  

}
