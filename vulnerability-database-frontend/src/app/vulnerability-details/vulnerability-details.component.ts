/**
   * This component that shows all of the vulnerbailities from the custom query search 
   * Author: Trey Cosnowski, Alex Bocchi
*/

import { Component, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute, NavigationStart } from '@angular/router';
import { VulnerabilityService } from './vulnerability-details.service';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { CommonModule } from '@angular/common';
import { ApiService } from '../api.service';
import { Subscription } from 'rxjs';
import { Router } from 'express';


@Component({
  selector: 'app-vulnerability-details',
  templateUrl: './vulnerability-details.component.html',
  styleUrls: ['./vulnerability-details.component.css'],
  standalone: true,
  imports: [MatProgressSpinnerModule, CommonModule],
})


export class VulnerabilityDetailsComponent implements OnInit{
  vulnerabilityDetails: any;
  subscription: Subscription;


  constructor(private route: ActivatedRoute, private apiService: ApiService) { }
  


  asb_url: string = 'https://source.android.com';

  componentCodeLinkDict = new Map()
  componentCodeArray: string[]
  badCve = null


  ngOnInit() {
    this.route.params.subscribe(params => {
      
      const vulnerabilityId = params['cveCode'];
      this.apiService.getAsbData(vulnerabilityId).subscribe({
        next: (asbdata) => {
          
          this.vulnerabilityDetails = asbdata["results"][0];
          console.log(this.vulnerabilityDetails)
          this.handleData()
          console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        }
      });
      
      
    });

  }

  getSeverityColor(baseScore: number): string {
    if (baseScore >= 7) {
      return 'warn'; // Use Angular Material warn color for high severity
    } else if (baseScore >= 4) {
      return 'accent'; // Use Angular Material accent color for medium severity
    } else {
      return 'primary'; // Use Angular Material primary color for low severity
    }
  }
  // CVE-2015-2686
  handleData(){
    
    if (this.vulnerabilityDetails["reference_links"] != 'None'){
      
      const linkList = this.vulnerabilityDetails["reference_links"].split(":",3)
      console.log("list", linkList)
      let https: string 
      let link: string
      if (linkList.length > 2){
        https = linkList[1]
        link = linkList[2]
        console.log("https", https)
        console.log("link", link)
        https = https.substring(2, https.length -1)
        link = link.substring(0, link.length-2)
      }
      else{
        https = linkList[0]
        link = linkList[1]
        https = https.substring(2, https.length -1)
        link = link.substring(0, link.length-2)
      }


      

      this.vulnerabilityDetails["reference_links"] = https + ':' + link
    }
    if (this.vulnerabilityDetails["component_code"] != "None"){
      let componentCode: string = this.vulnerabilityDetails["component_code"].substring(1,this.vulnerabilityDetails["component_code"].length-1)
      
      this.componentCodeArray = componentCode.split(',')

      for (let i = 0; i < this.componentCodeArray.length; i++){
        
        this.componentCodeArray[i] = this.componentCodeArray[i].trim().substring(1, this.componentCodeArray[i].trim().length-1)
      }



    }

    if (this.vulnerabilityDetails["component_code_link"] != "None"){
      let componentCodeLinks: string = this.vulnerabilityDetails["component_code_link"].substring(1,this.vulnerabilityDetails["component_code_link"].length-1)
      
      let componentCodeLinksArray: string[] = componentCodeLinks.split(',')

      for (let i = 0; i < componentCodeLinksArray.length; i++){
        let keyAndValue: string[] = componentCodeLinksArray[i].split(":")

        let key: string = keyAndValue[0].trim().substring(1,keyAndValue[0].length-1)
        let https: string = keyAndValue[1].trim().substring(1,keyAndValue[1].length)
        let link: string = keyAndValue[2].trim().substring(0,keyAndValue[2].length-1)
        let fullLink: string = https + ':' + link
        
        this.componentCodeLinkDict.set(key, fullLink) 
      }
    }
    console.log("tersttttt")
    console.log("!!!!!")
    if (this.vulnerabilityDetails["base_score"] == null){
      this.apiService.getBadCVE(this.vulnerabilityDetails["cve"]).subscribe({
        next: (data) => {
          console.log(data["results"][0])
          this.badCve = data["results"][0]["vuln_status"]
        }
      })
    
    }
    
  }
}
