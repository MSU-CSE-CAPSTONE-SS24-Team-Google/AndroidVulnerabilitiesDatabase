import { Injectable } from '@angular/core';
import { ViewChild, ElementRef, Component } from '@angular/core';
import { ApiService } from './api.service';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class SearchService {

  constructor(private apiService: ApiService, private router: Router) {} 

  //a function to make sure that the search values entered return some data
  validateSearch(cve: string): Observable<boolean> {
    return new Observable<boolean>(observer => {
      this.apiService.getAsbData(cve).subscribe({
        next: (data) => {
          if (data && data.results && data.results.length > 0) {

            observer.next(true);
          } else {
            observer.next(false);
          }
          observer.complete();

        },
        error: (error) => {
          console.error('uh oh', error);
          observer.next(false);
          observer.complete();
        }
      });
    });
  }

  //function to handle the search being submitted
  onSearchSubmit(searchInput: string): void {

    const searchValue = searchInput.trim().split(/[,\s]+/);

    const cveFormat = /^CVE-\d{4}-\d+$/;
    const dateFormat = /^\d{4}-\d{2}-\d{2},\d{4}-\d{2}-\d{2}/;
    const validCVEs: string[] = [];

    //when a proper date range is entered in the correct format,
    //redirect to dashboard using those dates as parameters
    if (dateFormat.test(searchInput.trim()))
    {
      let dates: string[] = searchInput.split(',');
      const start = new Date(dates[0]);
      const end = new Date(dates[1]);
      const currentDate = new Date();

      if ( end <= currentDate && end >= start)
        {     
          this.router.navigate(['/Dashboard/', dates[0], dates[1]]);
        }    
      else
      {
        alert('The date range entered is invalid')
      }
    }

    else if (searchValue.length !== 0)  {
      //handle a single cve being entered
      if (searchValue.length === 1)
      {
        this.validateSearch(searchValue[0]).subscribe(isValid => {
          if (isValid) {
            this.router.navigate(['/details/',searchValue[0]]);
          } 
          else 
          {
            alert('CVE does not return any data');
          }
        });
      }
      //handle multiple cves being entered
      else
      {
      //loop through every cve entered and check if it is valid, if any cve is not valid, it will alert the user
      for (const cve of searchValue)
      {
        this.validateSearch(cve).subscribe(isValid => {
          if (isValid) {

            validCVEs.push(cve);

            if (validCVEs.length === searchValue.length) {
              this.router.navigate(['/Dashboard', { cves: validCVEs }]);
            }
          } 
          else 
          {
            alert('One of the CVEs does not return any data');
          }
        });
      }
    
    }
  }
}
}
 


